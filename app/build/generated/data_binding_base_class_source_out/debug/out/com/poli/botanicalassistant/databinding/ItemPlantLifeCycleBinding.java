// Generated by view binder compiler. Do not edit!
package com.poli.botanicalassistant.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textview.MaterialTextView;
import com.poli.botanicalassistant.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPlantLifeCycleBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialTextView growthSpeedText;

  @NonNull
  public final Guideline guideline;

  @NonNull
  public final MaterialTextView lifeCycleText;

  @NonNull
  public final MaterialTextView seasonalityText;

  private ItemPlantLifeCycleBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialTextView growthSpeedText, @NonNull Guideline guideline,
      @NonNull MaterialTextView lifeCycleText, @NonNull MaterialTextView seasonalityText) {
    this.rootView = rootView;
    this.growthSpeedText = growthSpeedText;
    this.guideline = guideline;
    this.lifeCycleText = lifeCycleText;
    this.seasonalityText = seasonalityText;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemPlantLifeCycleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemPlantLifeCycleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_plant_life_cycle, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemPlantLifeCycleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.growth_speed_text;
      MaterialTextView growthSpeedText = ViewBindings.findChildViewById(rootView, id);
      if (growthSpeedText == null) {
        break missingId;
      }

      id = R.id.guideline;
      Guideline guideline = ViewBindings.findChildViewById(rootView, id);
      if (guideline == null) {
        break missingId;
      }

      id = R.id.life_cycle_text;
      MaterialTextView lifeCycleText = ViewBindings.findChildViewById(rootView, id);
      if (lifeCycleText == null) {
        break missingId;
      }

      id = R.id.seasonality_text;
      MaterialTextView seasonalityText = ViewBindings.findChildViewById(rootView, id);
      if (seasonalityText == null) {
        break missingId;
      }

      return new ItemPlantLifeCycleBinding((MaterialCardView) rootView, growthSpeedText, guideline,
          lifeCycleText, seasonalityText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
